// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/ONSdigital/dp-authorisation/v2/permissions"
	"sync"
)

// PermissionsCheckerMock is a mock implementation of authoriser.PermissionsChecker.
//
// 	func TestSomethingThatUsesPermissionsChecker(t *testing.T) {
//
// 		// make and configure a mocked authoriser.PermissionsChecker
// 		mockedPermissionsChecker := &PermissionsCheckerMock{
// 			HasPermissionFunc: func(ctx context.Context, entityData permissions.EntityData, permission string, attributes map[string]string) (bool, error) {
// 				panic("mock out the HasPermission method")
// 			},
// 		}
//
// 		// use mockedPermissionsChecker in code that requires authoriser.PermissionsChecker
// 		// and then make assertions.
//
// 	}
type PermissionsCheckerMock struct {
	// HasPermissionFunc mocks the HasPermission method.
	HasPermissionFunc func(ctx context.Context, entityData permissions.EntityData, permission string, attributes map[string]string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// HasPermission holds details about calls to the HasPermission method.
		HasPermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EntityData is the entityData argument value.
			EntityData permissions.EntityData
			// Permission is the permission argument value.
			Permission string
			// Attributes is the attributes argument value.
			Attributes map[string]string
		}
	}
	lockHasPermission sync.RWMutex
}

// HasPermission calls HasPermissionFunc.
func (mock *PermissionsCheckerMock) HasPermission(ctx context.Context, entityData permissions.EntityData, permission string, attributes map[string]string) (bool, error) {
	if mock.HasPermissionFunc == nil {
		panic("PermissionsCheckerMock.HasPermissionFunc: method is nil but PermissionsChecker.HasPermission was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		EntityData permissions.EntityData
		Permission string
		Attributes map[string]string
	}{
		Ctx:        ctx,
		EntityData: entityData,
		Permission: permission,
		Attributes: attributes,
	}
	mock.lockHasPermission.Lock()
	mock.calls.HasPermission = append(mock.calls.HasPermission, callInfo)
	mock.lockHasPermission.Unlock()
	return mock.HasPermissionFunc(ctx, entityData, permission, attributes)
}

// HasPermissionCalls gets all the calls that were made to HasPermission.
// Check the length with:
//     len(mockedPermissionsChecker.HasPermissionCalls())
func (mock *PermissionsCheckerMock) HasPermissionCalls() []struct {
	Ctx        context.Context
	EntityData permissions.EntityData
	Permission string
	Attributes map[string]string
} {
	var calls []struct {
		Ctx        context.Context
		EntityData permissions.EntityData
		Permission string
		Attributes map[string]string
	}
	mock.lockHasPermission.RLock()
	calls = mock.calls.HasPermission
	mock.lockHasPermission.RUnlock()
	return calls
}
