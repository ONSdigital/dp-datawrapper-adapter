// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"
)

// ChartStoreMock is a mock implementation of authoriser.ChartStore.
//
// 	func TestSomethingThatUsesChartStore(t *testing.T) {
//
// 		// make and configure a mocked authoriser.ChartStore
// 		mockedChartStore := &ChartStoreMock{
// 			GetCollectionIDFunc: func(chartID string) (string, error) {
// 				panic("mock out the GetCollectionID method")
// 			},
// 		}
//
// 		// use mockedChartStore in code that requires authoriser.ChartStore
// 		// and then make assertions.
//
// 	}
type ChartStoreMock struct {
	// GetCollectionIDFunc mocks the GetCollectionID method.
	GetCollectionIDFunc func(chartID string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetCollectionID holds details about calls to the GetCollectionID method.
		GetCollectionID []struct {
			// ChartID is the chartID argument value.
			ChartID string
		}
	}
	lockGetCollectionID sync.RWMutex
}

// GetCollectionID calls GetCollectionIDFunc.
func (mock *ChartStoreMock) GetCollectionID(chartID string) (string, error) {
	if mock.GetCollectionIDFunc == nil {
		panic("ChartStoreMock.GetCollectionIDFunc: method is nil but ChartStore.GetCollectionID was just called")
	}
	callInfo := struct {
		ChartID string
	}{
		ChartID: chartID,
	}
	mock.lockGetCollectionID.Lock()
	mock.calls.GetCollectionID = append(mock.calls.GetCollectionID, callInfo)
	mock.lockGetCollectionID.Unlock()
	return mock.GetCollectionIDFunc(chartID)
}

// GetCollectionIDCalls gets all the calls that were made to GetCollectionID.
// Check the length with:
//     len(mockedChartStore.GetCollectionIDCalls())
func (mock *ChartStoreMock) GetCollectionIDCalls() []struct {
	ChartID string
} {
	var calls []struct {
		ChartID string
	}
	mock.lockGetCollectionID.RLock()
	calls = mock.calls.GetCollectionID
	mock.lockGetCollectionID.RUnlock()
	return calls
}
